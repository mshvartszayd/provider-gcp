/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Expression *string `json:"expression" tf:"expression,omitempty"`

	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`
}

type RegistryRepositoryIAMMemberObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RegistryRepositoryIAMMemberParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Member *string `json:"member" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// +kubebuilder:validation:Required
	Repository *string `json:"repository" tf:"repository,omitempty"`

	// +kubebuilder:validation:Required
	Role *string `json:"role" tf:"role,omitempty"`
}

// RegistryRepositoryIAMMemberSpec defines the desired state of RegistryRepositoryIAMMember
type RegistryRepositoryIAMMemberSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistryRepositoryIAMMemberParameters `json:"forProvider"`
}

// RegistryRepositoryIAMMemberStatus defines the observed state of RegistryRepositoryIAMMember.
type RegistryRepositoryIAMMemberStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistryRepositoryIAMMemberObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryRepositoryIAMMember is the Schema for the RegistryRepositoryIAMMembers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type RegistryRepositoryIAMMember struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistryRepositoryIAMMemberSpec   `json:"spec"`
	Status            RegistryRepositoryIAMMemberStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryRepositoryIAMMemberList contains a list of RegistryRepositoryIAMMembers
type RegistryRepositoryIAMMemberList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegistryRepositoryIAMMember `json:"items"`
}

// Repository type metadata.
var (
	RegistryRepositoryIAMMember_Kind             = "RegistryRepositoryIAMMember"
	RegistryRepositoryIAMMember_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegistryRepositoryIAMMember_Kind}.String()
	RegistryRepositoryIAMMember_KindAPIVersion   = RegistryRepositoryIAMMember_Kind + "." + CRDGroupVersion.String()
	RegistryRepositoryIAMMember_GroupVersionKind = CRDGroupVersion.WithKind(RegistryRepositoryIAMMember_Kind)
)

func init() {
	SchemeBuilder.Register(&RegistryRepositoryIAMMember{}, &RegistryRepositoryIAMMemberList{})
}
