/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MavenConfigObservation struct {
}

type MavenConfigParameters struct {

	// The repository with this flag will allow publishing the same
	// snapshot versions.
	// +kubebuilder:validation:Optional
	AllowSnapshotOverwrites *bool `json:"allowSnapshotOverwrites,omitempty" tf:"allow_snapshot_overwrites,omitempty"`

	// Version policy defines the versions that the registry will accept.
	// Default value is VERSION_POLICY_UNSPECIFIED.
	// Possible values are VERSION_POLICY_UNSPECIFIED, RELEASE, and SNAPSHOT.
	// +kubebuilder:validation:Optional
	VersionPolicy *string `json:"versionPolicy,omitempty" tf:"version_policy,omitempty"`
}

type RegistryRepositoryObservation struct {

	// The time when the repository was created.
	CreateTime *string `json:"createTime,omitempty" tf:"create_time,omitempty"`

	// an identifier for the resource with format projects/{{project}}/locations/{{location}}/repositories/{{repository_id}}
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The time when the repository was last updated.
	UpdateTime *string `json:"updateTime,omitempty" tf:"update_time,omitempty"`
}

type RegistryRepositoryParameters struct {

	// The user-provided description of the repository.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The format of packages that are stored in the repository. Supported formats
	// can be found here.
	// You can only create alpha formats if you are a member of the
	// alpha user group.
	// +kubebuilder:validation:Required
	Format *string `json:"format" tf:"format,omitempty"`

	// The Cloud KMS resource name of the customer managed encryption key thatâ€™s
	// used to encrypt the contents of the Repository. Has the form:
	// projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key.
	// This value may not be changed after the Repository has been created.
	// +kubebuilder:validation:Optional
	KMSKeyName *string `json:"kmsKeyName,omitempty" tf:"kms_key_name,omitempty"`

	// Labels with user-defined metadata.
	// This field may contain up to 64 entries. Label keys and values may be no
	// longer than 63 characters. Label keys must begin with a lowercase letter
	// and may only contain lowercase letters, numeric characters, underscores,
	// and dashes.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// The name of the location this repository is located in.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// MavenRepositoryConfig is maven related repository details.
	// Provides additional configuration details for repositories of the maven
	// format type.
	// Structure is documented below.
	// +kubebuilder:validation:Optional
	MavenConfig []MavenConfigParameters `json:"mavenConfig,omitempty" tf:"maven_config,omitempty"`

	// The ID of the project in which the resource belongs.
	// If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// The last part of the repository name, for example:
	// "repo1"
	// +kubebuilder:validation:Required
	RepositoryID *string `json:"repositoryId" tf:"repository_id,omitempty"`
}

// RegistryRepositorySpec defines the desired state of RegistryRepository
type RegistryRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistryRepositoryParameters `json:"forProvider"`
}

// RegistryRepositoryStatus defines the observed state of RegistryRepository.
type RegistryRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistryRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryRepository is the Schema for the RegistryRepositorys API. A repository for storing artifacts
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp}
type RegistryRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistryRepositorySpec   `json:"spec"`
	Status            RegistryRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryRepositoryList contains a list of RegistryRepositorys
type RegistryRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegistryRepository `json:"items"`
}

// Repository type metadata.
var (
	RegistryRepository_Kind             = "RegistryRepository"
	RegistryRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegistryRepository_Kind}.String()
	RegistryRepository_KindAPIVersion   = RegistryRepository_Kind + "." + CRDGroupVersion.String()
	RegistryRepository_GroupVersionKind = CRDGroupVersion.WithKind(RegistryRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&RegistryRepository{}, &RegistryRepositoryList{})
}
